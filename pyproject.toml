[project]
dynamic = ["version"]

name = "brag-ai"
description = "Generate and maintain a brag document automatically from your GitHub contributions, powered by AI."

authors = [{ name = "Ruan Comelli", email = "ruancomelli@gmail.com" }]
readme = "README.md"

classifiers = [
    "Operating System :: OS Independent",
    "Typing :: Typed",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

requires-python = ">=3.12"
dependencies = [
    "asyncer>=0.0.8",
    "click>=8.1.8",
    "loguru>=0.7.3",
    "pydantic>=2.10.6",
    "pydantic-ai>=0.0.24",
    "pygithub>=2.6.0",
    "rich>=13.9.4",
    "typer>=0.15.1",
]

[project.urls]
# Homepage = "https://example.com"
Documentation = "https://ruancomelli.github.io/brag-ai/"
Repository = "https://github.com/ruancomelli/brag-ai.git"
Issues = "https://github.com/ruancomelli/brag-ai/issues"
Changelog = "https://github.com/ruancomelli/brag-ai/blob/main/CHANGELOG.md"

[project.scripts]
brag = "brag.__main__:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/brag/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/brag"]

[dependency-groups]
lint = ["ruff>=0.9.7"]
format = ["ruff>=0.9.7"]
type-check = ["mypy>=1.15.0"]
test = ["pytest>=8.3.4"]
test-cov = ["pytest>=8.3.4", "pytest-cov>=6.0.0"]
pre-commit = ["pre-commit>=4.1.0"]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material[imaging]>=9.6.7",
    "pymdown-extensions>=10.14.3",
]

[tool.mypy]
plugins = ['pydantic.mypy']
files = ["src/**/*.py"]
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_calls = true
warn_unused_ignores = true
enable_error_code = "possibly-undefined"

[[tool.mypy.overrides]]
module = ["nox"]
ignore_missing_imports = true

[tool.pytest.ini_options]
xfail_strict = true
testpaths = ["tests"]

[tool.ruff.lint]
select = [
    "D",      # pydocstyle
    "F",      # pyflakes
    "I",      # isort
    "PL",     # pylint
    "RUF100", # unused-noqa-directive
    "UP",     # pyupgrade
]
ignore = [
    "D105",    # Missing docstring in magic method
    "D203",    # incorrect-blank-line-before-class
    "D213",    # multi-line-summary-second-line
    "D413",    # Missing blank line after last section
    "PLR0913", # Too many arguments in function definition
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401", # Unused imports
]
"tests/**/*.py" = [
    "D", # Documentation
]

[tool.ruff.lint.pydocstyle]
ignore-decorators = ["typing.overload", "ropeskip._typing.override"]
