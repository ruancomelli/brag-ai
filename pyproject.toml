[project]
dynamic = ["version"]
name = "brag-ai"
description = "Generate and maintain a brag document automatically from your GitHub contributions, powered by AI."
authors = [{name = "Ruan Comelli", email = "ruancomelli@gmail.com"}]
readme = "README.md"
license = "GPL-3.0-only"
license-files = ["LICENSE"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed"
]
requires-python = ">=3.12"
dependencies = [
    "cyclopts>=3.9.2",
    "gitpython>=3.1.44",
    "loguru>=0.7.3",
    "pydantic>=2.10.6",
    "pydantic-ai-slim[anthropic,cohere,groq,mistral,openai,vertexai]>=0.0.43",
    "pygithub>=2.6.0",
    "rich>=13.9.4"
]

[project.urls]
Homepage = "https://github.com/ruancomelli/brag-ai"
Documentation = "https://www.ruancomelli.com/brag-ai/"
Repository = "https://github.com/ruancomelli/brag-ai.git"
Issues = "https://github.com/ruancomelli/brag-ai/issues"
Changelog = "https://github.com/ruancomelli/brag-ai/blob/main/CHANGELOG.md"

[project.scripts]
brag = "brag.__main__:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/brag/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/brag"]

[tool.mypy]
files = ["src/"]
plugins = ['pydantic.mypy']
allow_redefinition = true
enable_error_code = "possibly-undefined"
strict = true
warn_unreachable = true

[[tool.mypy.overrides]]
# TODO: revisit this as Pydantic AI or OpenTelemetry get updated
module = "opentelemetry"
ignore_errors = true

[tool.pytest.ini_options]
xfail_strict = true
testpaths = ["tests"]

[tool.ruff.lint]
select = [
    "D",  # pydocstyle
    "F",  # pyflakes
    "I",  # isort
    "PL",  # pylint
    "RUF100",  # unused-noqa-directive
    "UP"  # pyupgrade
]
ignore = [
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in __init__
    "D203",  # incorrect-blank-line-before-class
    "D213",  # multi-line-summary-second-line
    "D413",  # Missing blank line after last section
    "PLR0913"  # Too many arguments in function definition
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401"  # Unused imports
]
"tests/**/*.py" = [
    "D"  # Documentation
]

[tool.ruff.lint.pydocstyle]
ignore-decorators = ["typing.overload"]

[tool.codeflash]
# All paths are relative to this pyproject.toml's directory.
module-root = "src"
tests-root = "tests"
test-framework = "pytest"
ignore-paths = []
formatter-cmds = ["ruff check --exit-zero --fix $file", "ruff format $file"]

[tool.deptry]
known_first_party = ["brag"]

[dependency-groups]
lint = ["ruff>=0.9.7"]
format = ["ruff>=0.9.7"]
type-check = ["mypy>=1.15.0"]
test = ["pytest>=8.3.4"]
test-cov = ["pytest>=8.3.4", "pytest-cov>=6.0.0"]
pre-commit = ["deptry>=0.23.0", "pre-commit>=4.1.0"]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-api-autonav>=0.2.1",
    "mkdocs-material[imaging]>=9.6.7",
    "pymdown-extensions>=10.14.3"
]
