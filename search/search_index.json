{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udc81 Brag AI","text":"<p>Generate and maintain a brag document automatically from your GitHub contributions, powered by AI.</p> <p>Because your awesome work deserves to be remembered! \u2728</p> <p> </p>"},{"location":"#overview","title":"Overview","text":"<p>Ever had that moment when your manager asks \"So, what have you been up to?\" and your mind goes blank?</p> <p>Brag AI is your personal achievement historian! It helps you create and maintain a \"brag document\" - a fancy record of all the cool stuff you've done. It dives into your GitHub activity and transforms those cryptic commit messages into beautiful, human-readable achievements that will make your portfolio shine! \u2728</p> <p>Perfect for:</p> <ul> <li>\ud83d\udcca Performance reviews (without the last-minute panic)</li> <li>\ud83d\udcbc Job applications (show off with style)</li> <li>\ud83d\udcc8 Personal development tracking (watch yourself grow!)</li> <li>\ud83c\udf89 Impressing your friends (and maybe your pet - results may vary)</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\udd0d GitHub Integration: Automagically analyzes your commits to generate achievement descriptions</li> <li>\ud83e\udd16 AI-Powered: Turns \"fix: bug in login\" into \"Enhanced system reliability by resolving critical authentication issues\"</li> <li>\ud83d\udcbb CLI Tool: Easy to use command-line interface</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Check out the Installation guide to get Brag AI up and running on your system.</p> <p>Then head over to the Usage guide to learn how to generate your first brag document.</p>"},{"location":"#coming-soontm","title":"Coming Soon\u2122 \ud83d\ude80","text":"<ul> <li>\ud83c\udf10 Web Interface: Because sometimes clicking is better than typing</li> <li>\ud83e\udd1d Extended GitHub Integration: Support for PR reviews, issues, and discussions</li> <li>\ud83d\udd04 Integration with other tools: GitLab, Bitbucket, and more - we don't discriminate!</li> <li>\ud83d\udcdd Custom Templates: Make your brag document as unique as you are</li> <li>\ud83d\udce6 Export Options: More ways to show off your achievements (JSON brag documents anyone?)</li> <li>\ud83d\udd12 Local Processing: Your precious data stays on your machine if you use local LLMs</li> </ul>"},{"location":"#community","title":"Community","text":"<p>Got ideas? We'd love to hear them! Check out our Contributing Guide to join the fun! \ud83c\udf88</p>"},{"location":"#license","title":"License","text":"<p>This project is currently private (shhh... \ud83e\udd2b)</p>"},{"location":"#support","title":"Support","text":"<ul> <li>\ud83d\udcd6 Documentation</li> <li>\ud83d\udc1b Issue Tracker</li> <li>\ud83d\udcac Discussions</li> <li>\ud83d\udcbb Repository</li> </ul>"},{"location":"#why-brag-ai","title":"Why Brag AI?","text":"<p>Maintaining a brag document is crucial for career development, but it's often overlooked or forgotten until it's time for a performance review. Brag AI automates this process, helping you capture your achievements while they're fresh or after a long time.</p> <p>Built with \u2764\ufe0f and \u2615 by Ruan Comelli</p> <p>Remember: It's not bragging if it's true! \u2728</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>This guide provides details about the key modules and functions in the Brag AI codebase. It's useful if you want to use Brag AI programmatically or extend its functionality.</p>"},{"location":"api-reference/#core-modules","title":"Core Modules","text":""},{"location":"api-reference/#brag__main__","title":"<code>brag.__main__</code>","text":"<p>The entry point for the Brag AI CLI application.</p> <pre><code>from brag.__main__ import app\n\n# Run the CLI app\napp()\n</code></pre>"},{"location":"api-reference/#bragcli","title":"<code>brag.cli</code>","text":"<p>Contains the command-line interface implementation using Typer.</p> <pre><code>from brag.cli import app\n\n# Access the Typer app\napp.info\n</code></pre>"},{"location":"api-reference/#braggithub_commits","title":"<code>brag.github_commits</code>","text":"<p>Provides functionality for retrieving commits from GitHub repositories.</p> <pre><code>from brag.github_commits import get_commits_for_user\n\n# Get commits for a user in a repository\ncommits = get_commits_for_user(\n    repo_name=\"owner/repo\",\n    username=\"github-username\",\n    token=\"github-api-token\",\n    from_date=\"2023-01-01\",\n    to_date=\"2023-12-31\",\n    limit=50\n)\n</code></pre>"},{"location":"api-reference/#bragagents","title":"<code>brag.agents</code>","text":"<p>Contains AI agent implementations for generating brag documents.</p> <pre><code>from brag.agents import BragDocumentGenerator\n\n# Create a brag document generator\ngenerator = BragDocumentGenerator(\n    model=\"openai:gpt-4o\",\n    language=\"English\"\n)\n\n# Generate a brag document from commits\nbrag_document = generator.generate_brag_document(commits)\n</code></pre>"},{"location":"api-reference/#bragrepository","title":"<code>brag.repository</code>","text":"<p>Provides abstractions for working with Git repositories.</p> <pre><code>from brag.repository import Repository\n\n# Create a repository instance\nrepo = Repository.from_name(\"owner/repo\", token=\"github-api-token\")\n</code></pre>"},{"location":"api-reference/#bragtext_formatters","title":"<code>brag.text_formatters</code>","text":"<p>Contains utilities for formatting text output.</p> <pre><code>from brag.text_formatters import markdown_formatter\n\n# Format text as markdown\nformatted_text = markdown_formatter(\"# Heading\\n\\nParagraph\")\n</code></pre>"},{"location":"api-reference/#key-classes-and-functions","title":"Key Classes and Functions","text":""},{"location":"api-reference/#bragdocumentgenerator","title":"<code>BragDocumentGenerator</code>","text":"<p>The main class for generating brag documents.</p> <pre><code>from brag.agents import BragDocumentGenerator\n\ngenerator = BragDocumentGenerator(\n    model=\"openai:gpt-4o\",\n    language=\"English\"\n)\n\nbrag_document = generator.generate_brag_document(commits)\n</code></pre>"},{"location":"api-reference/#parameters","title":"Parameters","text":"<ul> <li><code>model</code>: The name of the AI model to use for generating the brag document.</li> <li><code>language</code>: The language to use for generating the brag document.</li> </ul>"},{"location":"api-reference/#methods","title":"Methods","text":"<ul> <li><code>generate_brag_document(commits)</code>: Generates a brag document from a list of commits.</li> </ul>"},{"location":"api-reference/#get_commits_for_user","title":"<code>get_commits_for_user</code>","text":"<p>Function to retrieve commits for a specific user in a repository.</p> <pre><code>from brag.github_commits import get_commits_for_user\n\ncommits = get_commits_for_user(\n    repo_name=\"owner/repo\",\n    username=\"github-username\",\n    token=\"github-api-token\",\n    from_date=\"2023-01-01\",\n    to_date=\"2023-12-31\",\n    limit=50\n)\n</code></pre>"},{"location":"api-reference/#parameters_1","title":"Parameters","text":"<ul> <li><code>repo_name</code>: The name of the repository (in the format \"owner/repo\").</li> <li><code>username</code>: The GitHub username to get commits for.</li> <li><code>token</code>: The GitHub API token for authentication (optional).</li> <li><code>from_date</code>: The start date to get commits from (format: YYYY-MM-DD).</li> <li><code>to_date</code>: The end date to get commits to (format: YYYY-MM-DD).</li> <li><code>limit</code>: The maximum number of commits to retrieve.</li> </ul>"},{"location":"api-reference/#repository","title":"<code>Repository</code>","text":"<p>Class for working with Git repositories.</p> <pre><code>from brag.repository import Repository\n\nrepo = Repository.from_name(\"owner/repo\", token=\"github-api-token\")\n</code></pre>"},{"location":"api-reference/#class-methods","title":"Class Methods","text":"<ul> <li><code>from_name(repo_name, token=None)</code>: Creates a Repository instance from a repository name.</li> </ul>"},{"location":"api-reference/#usage-examples","title":"Usage Examples","text":""},{"location":"api-reference/#generating-a-brag-document-programmatically","title":"Generating a Brag Document Programmatically","text":"<pre><code>from brag.github_commits import get_commits_for_user\nfrom brag.agents import BragDocumentGenerator\n\n# Get commits for a user\ncommits = get_commits_for_user(\n    repo_name=\"owner/repo\",\n    username=\"github-username\",\n    token=\"github-api-token\",\n    from_date=\"2023-01-01\",\n    to_date=\"2023-12-31\"\n)\n\n# Generate a brag document\ngenerator = BragDocumentGenerator(model=\"openai:gpt-4o\")\nbrag_document = generator.generate_brag_document(commits)\n\n# Print or save the brag document\nprint(brag_document)\n# Or\nwith open(\"brag.md\", \"w\") as f:\n    f.write(brag_document)\n</code></pre>"},{"location":"api-reference/#using-custom-formatters","title":"Using Custom Formatters","text":"<pre><code>from brag.github_commits import get_commits_for_user\nfrom brag.agents import BragDocumentGenerator\nfrom brag.text_formatters import markdown_formatter\n\n# Get commits\ncommits = get_commits_for_user(repo_name=\"owner/repo\", username=\"github-username\")\n\n# Generate brag document\ngenerator = BragDocumentGenerator()\nbrag_document = generator.generate_brag_document(commits)\n\n# Format the brag document\nformatted_document = markdown_formatter(brag_document)\n\n# Save the formatted document\nwith open(\"brag.md\", \"w\") as f:\n    f.write(formatted_document)\n</code></pre>"},{"location":"api-reference/#error-handling","title":"Error Handling","text":"<p>When using the Brag AI API, you might encounter various errors. Here's how to handle them:</p> <pre><code>from brag.github_commits import get_commits_for_user\nimport github.GithubException\n\ntry:\n    commits = get_commits_for_user(repo_name=\"owner/repo\", username=\"github-username\")\nexcept github.GithubException as e:\n    if e.status == 404:\n        print(\"Repository or user not found\")\n    elif e.status == 401:\n        print(\"Authentication failed, check your token\")\n    else:\n        print(f\"GitHub API error: {e}\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":"<p>Brag AI offers several configuration options to customize its behavior. This guide explains the different ways to configure Brag AI.</p>"},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"<p>Brag AI supports the following environment variables:</p>"},{"location":"configuration/#authentication-tokens","title":"Authentication Tokens","text":"Environment Variable Description <code>GITHUB_API_TOKEN</code> GitHub API token for authentication (required for private repositories or to increase rate limits) <code>OPENAI_API_KEY</code> OpenAI API key for using OpenAI models <code>ANTHROPIC_API_KEY</code> Anthropic API key for using Claude models <code>GEMINI_API_KEY</code> Google API key for using Gemini models <p>You can set these environment variables in your shell profile or use a <code>.env</code> file in your project directory.</p> <p>Example <code>.env</code> file:</p> <pre><code>GITHUB_API_TOKEN=ghp_your_github_token\nOPENAI_API_KEY=sk-your_openai_key\n</code></pre>"},{"location":"configuration/#environment-variable-precedence","title":"Environment Variable Precedence","text":"<p>Environment variables take precedence over command-line arguments. For example, if you set <code>GITHUB_API_TOKEN</code> in your environment and also provide <code>--github-api-token</code> on the command line, the environment variable will be used.</p>"},{"location":"configuration/#command-line-options","title":"Command-Line Options","text":"<p>Brag AI has several command-line options that can be used to configure its behavior:</p>"},{"location":"configuration/#repository-selection","title":"Repository Selection","text":"Option Description <code>owner/repo</code> The GitHub repository to generate the brag document from (positional argument) <code>--user</code> The GitHub username to generate the brag document for"},{"location":"configuration/#time-range","title":"Time Range","text":"Option Description <code>--from</code> The start date to generate the brag document for (format: YYYY-MM-DD) <code>--to</code> The end date to generate the brag document for (format: YYYY-MM-DD) <code>--limit</code> The maximum number of commits to include in the brag document"},{"location":"configuration/#authentication","title":"Authentication","text":"Option Description <code>--github-api-token</code> The GitHub API token to use for authentication"},{"location":"configuration/#output","title":"Output","text":"Option Description <code>--output</code> The path to save the generated brag document <code>--overwrite</code> If set, overwrites the output file if it already exists"},{"location":"configuration/#ai-model-configuration","title":"AI Model Configuration","text":"Option Description <code>--model</code> The name of the AI model to use for generating the brag document <code>--language</code> The language to use for generating the brag document"},{"location":"configuration/#model-selection","title":"Model Selection","text":"<p>Brag AI supports a variety of AI models through <code>pydantic-ai</code>. You can specify which model to use with the <code>--model</code> option.</p> <p>The format for the model name is <code>provider:model-name</code>. For example:</p> <ul> <li><code>openai:gpt-4o</code></li> <li><code>anthropic:claude-3-5-sonnet-latest</code></li> <li><code>google-vertex:gemini-2.0-flash</code></li> </ul> <p>For a full list of supported models, see the pydantic-ai documentation.</p>"},{"location":"configuration/#default-values","title":"Default Values","text":"<p>If not specified, Brag AI uses the following default values:</p> <ul> <li>User: The owner of the GitHub API token</li> <li>From date: None (no lower bound)</li> <li>To date: None (the current date)</li> <li>Limit: None (no limit)</li> <li>Output: stdout (print to console)</li> <li>Model: The default model configured in pydantic-ai</li> <li>Language: English</li> </ul>"},{"location":"configuration/#example-configurations","title":"Example Configurations","text":""},{"location":"configuration/#generate-a-brag-document-for-contributions-in-2023-using-gpt-4o","title":"Generate a brag document for contributions in 2023 using GPT-4o","text":"<pre><code>export OPENAI_API_KEY=your-openai-api-key\nbrag owner/repo --user github-username --from 2023-01-01 --to 2023-12-31 --model openai:gpt-4o\n</code></pre>"},{"location":"configuration/#generate-a-brag-document-in-portuguese-using-claude","title":"Generate a brag document in Portuguese using Claude","text":"<pre><code>export ANTHROPIC_API_KEY=your-anthropic-api-key\nbrag owner/repo --user github-username --language Portugu\u00eas --model anthropic:claude-3-5-sonnet-latest\n</code></pre>"},{"location":"configuration/#save-the-brag-document-to-a-file-and-limit-to-the-last-50-commits","title":"Save the brag document to a file and limit to the last 50 commits","text":"<pre><code>brag owner/repo --user github-username --limit 50 --output brag.md\n</code></pre>"},{"location":"contributing/","title":"Contributing to Brag AI \ud83c\udf88","text":"<p>So you want to contribute to Brag AI? Awesome! We're thrilled to have you join our quest to make bragging (about your achievements) an automated art form. Here's how you can help:</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository: Click the \"Fork\" button at the top right of the GitHub repository.</li> <li> <p>Clone your fork:</p> <pre><code>git clone https://github.com/your-username/brag-ai.git\ncd brag-ai\n</code></pre> </li> <li> <p>Set up your development environment: We use <code>uv</code> to manage our dependencies. Initialize your environment with:</p> <pre><code>bash scripts/init.sh\n</code></pre> <p>This will:</p> <ul> <li>Install all the required dev dependencies; and</li> <li>Set up pre-commit hooks</li> </ul> </li> <li> <p>Create a branch:</p> <pre><code>git checkout -b your-awesome-feature-name\n</code></pre> </li> </ol>"},{"location":"contributing/#making-changes","title":"Making Changes","text":"<ol> <li>Make your changes: Go wild! But please, keep the code clean and well-documented.</li> <li> <p>Test your changes: Run the tests to make sure you haven't broken anything:</p> <pre><code>bash scripts/test.sh\n</code></pre> <p>To run tests with coverage:</p> <pre><code>bash scripts/test-cov.sh\n</code></pre> </li> <li> <p>Format your code: Keep the code style consistent by running:</p> <pre><code>bash scripts/format.sh\n</code></pre> </li> <li> <p>Lint your code: Catch those pesky little errors with:</p> <pre><code>bash scripts/lint.sh\n</code></pre> </li> <li> <p>Type-check your code: Ensure type correctness by running:</p> <pre><code>bash scripts/type-check.sh\n</code></pre> </li> <li> <p>Commit your changes:</p> <pre><code>git add .\ngit commit -m \"feat: Add your awesome feature\"\n</code></pre> <p>Make sure your commit messages follow the Conventional Commits format.</p> </li> <li> <p>Push to your fork:</p> <pre><code>git push origin your-awesome-feature-name\n</code></pre> </li> </ol>"},{"location":"contributing/#submitting-a-pull-request","title":"Submitting a Pull Request","text":"<ol> <li>Create a pull request: Go to your fork on GitHub and click the \"Create Pull Request\" button.</li> <li>Describe your changes: Provide a clear and concise description of your changes.</li> <li>Wait for review: Our team will review your pull request and provide feedback.</li> <li>Address feedback: Make any necessary changes based on the feedback.</li> <li>Get merged!: Once your pull request is approved, it will be merged into the main branch. Congratulations,     you're now a Brag AI contributor! \ud83c\udf89</li> </ol>"},{"location":"contributing/#useful-scripts","title":"Useful Scripts","text":"<p>We have a few utility scripts in the <code>scripts/</code> directory to help you with development:</p> <ul> <li><code>scripts/init.sh</code>: Initializes the development environment by installing dependencies and setting up pre-commit hooks.</li> <li><code>scripts/test.sh</code>: Runs the tests. If invoked without arguments, it runs all tests. If invoked with test names, it runs only those tests.</li> <li><code>scripts/test-cov.sh</code>: Runs the tests with coverage.</li> <li><code>scripts/format.sh</code>: Formats the code. If invoked without arguments, it formats the entire codebase. If invoked with file paths, it formats only those files.</li> <li><code>scripts/lint.sh</code>: Lints the code. If invoked without arguments, it lints the entire codebase. If invoked with file paths, it lints only those files.</li> <li><code>scripts/type-check.sh</code>: Type-checks the code. If invoked without arguments, it type-checks the entire codebase. If invoked with file paths, it type-checks only those files.</li> </ul>"},{"location":"contributing/#contributing-to-documentation","title":"Contributing to Documentation","text":"<p>If you want to contribute to the documentation, you'll need to set up MkDocs:</p> <ol> <li>Install MkDocs and the required dependencies:</li> </ol> <pre><code>uv add --group docs mkdocs mkdocs-material pymdown-extensions\n</code></pre> <ol> <li> <p>Make your changes to the Markdown files in the <code>docs/</code> directory.</p> </li> <li> <p>Preview your changes by running the MkDocs development server:</p> </li> </ol> <pre><code>uv run --group docs mkdocs serve\n</code></pre> <ol> <li>Build the documentation to verify that it builds successfully:</li> </ol> <pre><code>uv run --group docs mkdocs build --strict\n</code></pre> <ol> <li>Commit and push your changes as normal.</li> </ol>"},{"location":"contributing/#code-style-guidelines","title":"Code Style Guidelines","text":"<p>We follow these general guidelines for code style:</p> <ul> <li>Use ruff for linting and formatting</li> <li>Follow PEP 8 style guidelines</li> <li>Use type hints for all function parameters and return values</li> <li>Write docstrings for all modules, classes, and functions</li> <li>Use Conventional Commits for commit messages</li> </ul>"},{"location":"contributing/#have-fun","title":"Have Fun!","text":"<p>We're all here to learn and grow together. Don't be afraid to ask questions, experiment, and have fun! \u2728 However, keep in mind that we're all volunteers, so please be patient and respectful when waiting for feedback. It is also of utmost importance to be respectful - treat others as you would like to be treated.</p>"},{"location":"development/","title":"Development Guide","text":"<p>This guide explains how to set up your development environment, understand the project structure, and contribute to the Brag AI codebase.</p>"},{"location":"development/#project-structure","title":"Project Structure","text":"<p>The Brag AI project is organized as follows:</p> <pre><code>brag-ai/\n\u251c\u2500\u2500 docs/                  # Documentation files\n\u251c\u2500\u2500 scripts/               # Development utility scripts\n\u251c\u2500\u2500 src/                   # Source code\n\u2502   \u2514\u2500\u2500 brag/              # Main package\n\u2502       \u251c\u2500\u2500 __init__.py    # Package initialization\n\u2502       \u251c\u2500\u2500 __main__.py    # CLI entry point\n\u2502       \u251c\u2500\u2500 agents.py      # AI agent implementations\n\u2502       \u251c\u2500\u2500 cli.py         # Command-line interface\n\u2502       \u251c\u2500\u2500 github_commits.py  # GitHub API interactions\n\u2502       \u251c\u2500\u2500 repository.py  # Repository abstractions\n\u2502       \u2514\u2500\u2500 text_formatters.py # Text formatting utilities\n\u251c\u2500\u2500 tests/                 # Test files\n\u251c\u2500\u2500 .env                   # Environment variables\n\u251c\u2500\u2500 .gitignore             # Git ignore file\n\u251c\u2500\u2500 .pre-commit-config.yaml # Pre-commit hooks configuration\n\u251c\u2500\u2500 pyproject.toml         # Project configuration\n\u2514\u2500\u2500 README.md              # Project README\n</code></pre>"},{"location":"development/#development-environment-setup","title":"Development Environment Setup","text":""},{"location":"development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.12 or higher</li> <li>uv (recommended for dependency management)</li> <li>Git</li> </ul>"},{"location":"development/#setting-up-your-environment","title":"Setting Up Your Environment","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/ruancomelli/brag-ai.git\ncd brag-ai\n</code></pre> <ol> <li>Initialize the development environment:</li> </ol> <pre><code>bash scripts/init.sh\n</code></pre> <p>This script:</p> <ul> <li>Creates a virtual environment</li> <li>Installs development dependencies</li> <li> <p>Sets up pre-commit hooks</p> </li> <li> <p>Set up environment variables:</p> </li> </ul> <p>Create a <code>.env</code> file in the project root:</p> <pre><code>GITHUB_API_TOKEN=your_github_token\nOPENAI_API_KEY=your_openai_key\n</code></pre> <p>This file is listed in <code>.gitignore</code> so you don't accidentally commit your tokens.</p>"},{"location":"development/#development-workflow","title":"Development Workflow","text":""},{"location":"development/#making-code-changes","title":"Making Code Changes","text":"<ol> <li>Create a branch:</li> </ol> <pre><code>git checkout -b feature/your-feature-name\n</code></pre> <ol> <li> <p>Make your changes.</p> </li> <li> <p>Run tests to ensure your changes work:</p> </li> </ol> <pre><code>bash scripts/test.sh\n</code></pre> <ol> <li>Format your code:</li> </ol> <pre><code>bash scripts/format.sh\n</code></pre> <ol> <li>Lint your code:</li> </ol> <pre><code>bash scripts/lint.sh\n</code></pre> <ol> <li>Type-check your code:</li> </ol> <pre><code>bash scripts/type-check.sh\n</code></pre> <ol> <li>Commit your changes using Conventional Commits format:</li> </ol> <pre><code>git commit -m \"feat: Add new feature\"\n</code></pre> <ol> <li>Push your changes:</li> </ol> <pre><code>git push origin feature/your-feature-name\n</code></pre> <ol> <li>Open a pull request on GitHub.</li> </ol>"},{"location":"development/#running-the-application-locally","title":"Running the Application Locally","text":"<p>To run the application locally during development:</p> <pre><code>uv run src/brag/__main__.py --help\n</code></pre> <p>Or, if you've installed the package in development mode:</p> <pre><code>brag --help\n</code></pre>"},{"location":"development/#testing","title":"Testing","text":""},{"location":"development/#running-tests","title":"Running Tests","text":"<p>Run all tests:</p> <pre><code>bash scripts/test.sh\n</code></pre> <p>Run specific tests:</p> <pre><code>bash scripts/test.sh tests/test_specific.py\n</code></pre> <p>Run tests with coverage:</p> <pre><code>bash scripts/test-cov.sh\n</code></pre> <p>This will generate a coverage report in the terminal and a <code>coverage.xml</code> file.</p>"},{"location":"development/#writing-tests","title":"Writing Tests","text":"<p>Tests are located in the <code>tests/</code> directory. We use pytest for testing.</p> <p>When adding a new feature, please add corresponding tests. Aim for high test coverage and make sure to test edge cases.</p> <p>Example test structure:</p> <pre><code># tests/test_feature.py\nimport pytest\nfrom brag.feature import my_function\n\ndef test_my_function_happy_path():\n    # Test normal operation\n    result = my_function(input)\n    assert result == expected\n\ndef test_my_function_edge_case():\n    # Test edge case\n    with pytest.raises(ValueError):\n        my_function(bad_input)\n</code></pre>"},{"location":"development/#documentation","title":"Documentation","text":""},{"location":"development/#updating-documentation","title":"Updating Documentation","text":"<p>Documentation is built using MkDocs and the Material theme. Source files are in the <code>docs/</code> directory.</p> <p>To preview documentation changes:</p> <pre><code>uv run --group docs mkdocs serve\n</code></pre> <p>This starts a local web server at http://127.0.0.1:8000/ where you can preview your changes.</p> <p>To build the documentation:</p> <pre><code>uv run --group docs mkdocs build --strict\n</code></pre>"},{"location":"development/#documentation-style-guide","title":"Documentation Style Guide","text":"<ul> <li>Use clear, concise language</li> <li>Include code examples where appropriate</li> <li>Format code blocks with syntax highlighting</li> <li>Use heading levels appropriately</li> <li>Include links to related documentation</li> </ul>"},{"location":"development/#code-style","title":"Code Style","text":"<p>We follow these style guidelines:</p> <ul> <li>Use ruff for linting and formatting</li> <li>Follow PEP 8 style guidelines</li> <li>Use type hints for all function parameters and return values</li> <li>Write docstrings for all modules, classes, and functions</li> <li>Use descriptive variable and function names</li> </ul>"},{"location":"development/#debugging","title":"Debugging","text":""},{"location":"development/#logging","title":"Logging","text":"<p>The application uses loguru for logging. You can enable debug logs by setting the environment variable:</p> <pre><code>export LOGURU_LEVEL=DEBUG\n</code></pre>"},{"location":"development/#debugging-tests","title":"Debugging Tests","text":"<p>To debug tests with pytest, you can use the <code>-v</code> (verbose) flag:</p> <pre><code>pytest -v tests/test_feature.py\n</code></pre>"},{"location":"development/#cicd","title":"CI/CD","text":"<p>The project uses GitHub Actions for continuous integration and deployment. The workflows are defined in the <code>.github/workflows/</code> directory.</p> <p>The CI workflow runs on every pull request and checks:</p> <ul> <li>Code formatting</li> <li>Linting</li> <li>Type checking</li> <li>Test execution</li> <li>Documentation building</li> </ul>"},{"location":"development/#need-help","title":"Need Help?","text":"<p>If you're stuck or have questions, you can:</p> <ul> <li>Open an issue on GitHub</li> <li>Start a discussion in the GitHub Discussions section</li> <li>Check the existing documentation and issues for similar problems</li> </ul>"},{"location":"development/#tips-and-tricks","title":"Tips and Tricks","text":"<ul> <li>Use the development scripts in the <code>scripts/</code> directory to automate common tasks</li> <li>Keep PRs focused on a single feature or bug fix</li> <li>Add comments explaining complex logic</li> <li>Write tests before implementing features (TDD)</li> <li>Use descriptive commit messages to make the project history easier to understand</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>There are several ways to install Brag AI, depending on your needs and preferences.</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.12 or higher</li> <li>A GitHub account (for generating brag documents from GitHub repositories)</li> <li>An API key for at least one AI provider (OpenAI, Anthropic, or Google) if you want to use their models</li> </ul>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/#from-source-recommended-for-now","title":"From Source (Recommended for Now)","text":"<p>This project is still not published to PyPI. You can install it from source using pip:</p> <pre><code>pip install git+https://github.com/ruancomelli/brag-ai.git\n</code></pre>"},{"location":"installation/#using-uv","title":"Using <code>uv</code>","text":"<p>If you use <code>uv</code>, you can also run this tool using <code>uvx</code> tool calling without installation:</p> <pre><code>uvx --from git+https://github.com/ruancomelli/brag-ai brag --help # or any other command\n</code></pre>"},{"location":"installation/#verifying-your-installation","title":"Verifying Your Installation","text":"<p>To verify that Brag AI was installed correctly, run:</p> <pre><code>brag --version\n</code></pre> <p>You should see the current version number printed to the console.</p>"},{"location":"installation/#setting-up-api-keys","title":"Setting Up API Keys","text":"<p>Brag AI uses <code>pydantic-ai</code> under the hood, which supports various AI models.</p> <p>To use these models, you'll need to set up API keys as environment variables:</p>"},{"location":"installation/#openai","title":"OpenAI","text":"<pre><code>export OPENAI_API_KEY=your-openai-api-key\n</code></pre>"},{"location":"installation/#anthropic","title":"Anthropic","text":"<pre><code>export ANTHROPIC_API_KEY=your-anthropic-api-key\n</code></pre>"},{"location":"installation/#google-gemini","title":"Google (Gemini)","text":"<pre><code>export GEMINI_API_KEY=your-gemini-api-key\n</code></pre> <p>You can set these environment variables in your shell profile or use a <code>.env</code> file in your project directory.</p>"},{"location":"installation/#github-authentication","title":"GitHub Authentication","text":"<p>For accessing private GitHub repositories or increasing your rate limit, you can provide a GitHub API token:</p> <pre><code>export GITHUB_API_TOKEN=your-github-api-token\n</code></pre> <p>You can generate a Personal Access Token from your GitHub account settings. For more information, see GitHub's documentation on Creating a personal access token.</p>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>Now that you have Brag AI installed, check out the Usage Guide to learn how to generate your first brag document!</p>"},{"location":"release-notes/","title":"Release Notes","text":"<p>This page contains the release notes for Brag AI, documenting the changes and improvements in each version.</p>"},{"location":"release-notes/#unreleased","title":"Unreleased","text":""},{"location":"release-notes/#added","title":"Added","text":"<ul> <li>Initial release of Brag AI</li> <li>GitHub integration for retrieving commits</li> <li>AI-powered brag document generation</li> <li>Command-line interface</li> <li>Support for multiple AI providers (OpenAI, Anthropic, Google)</li> <li>Customizable language output</li> <li>Comprehensive documentation</li> </ul>"},{"location":"release-notes/#changed","title":"Changed","text":"<ul> <li>N/A (Initial release)</li> </ul>"},{"location":"release-notes/#fixed","title":"Fixed","text":"<ul> <li>N/A (Initial release)</li> </ul>"},{"location":"release-notes/#future-plans","title":"Future Plans","text":"<p>Here are some features and improvements planned for future releases:</p> <ul> <li>Web interface for easier interaction</li> <li>Extended GitHub integration (PR reviews, issues, and discussions)</li> <li>Integration with other Git platforms (GitLab, Bitbucket)</li> <li>Custom templates for brag documents</li> <li>Additional export options (JSON, HTML, PDF)</li> <li>Local LLM support for offline processing</li> <li>Team collaboration features</li> <li>Performance improvements for large repositories</li> </ul> <p>Stay tuned for these exciting updates!</p>"},{"location":"usage/","title":"Usage Guide","text":"<p>Brag AI is designed to be simple to use while providing powerful functionality. This guide will walk you through the basic and advanced usage of the tool.</p>"},{"location":"usage/#basic-usage","title":"Basic Usage","text":"<p>The most basic way to use Brag AI is to generate a brag document from a GitHub repository:</p> <pre><code>brag owner/repo --user github-username\n</code></pre> <p>This will generate a brag document based on the commits made by <code>github-username</code> to the specified repository.</p>"},{"location":"usage/#command-line-options","title":"Command Line Options","text":"<p>Brag AI offers several command line options to customize the generated brag document:</p> Option Description <code>--user</code> The GitHub username to generate the brag document for. If not provided, the owner of the GitHub API token will be used. <code>--from</code> The start date to generate the brag document for (format: YYYY-MM-DD). <code>--to</code> The end date to generate the brag document for (format: YYYY-MM-DD). <code>--limit</code> The maximum number of commits to include in the brag document. <code>--github-api-token</code> The GitHub API token to use for authentication. If not provided, only public information will be included. <code>--output</code> The path to save the generated brag document. If not specified, the document will be printed to stdout. <code>--overwrite</code> If set, overwrites the output file if it already exists. <code>--model</code> The name of the AI model to use for generating the brag document. <code>--language</code> The language to use for generating the brag document."},{"location":"usage/#examples","title":"Examples","text":"<p>Here are some examples of how to use Brag AI in different scenarios:</p>"},{"location":"usage/#generate-a-brag-document-for-a-specific-time-period","title":"Generate a Brag Document for a Specific Time Period","text":"<pre><code>brag my-org/my-repo --user my-username --from 2023-01-01 --to 2023-12-31\n</code></pre> <p>This will generate a brag document for the user <code>my-username</code> based on their contributions to the <code>my-org/my-repo</code> repository between January 1, 2023, and December 31, 2023.</p>"},{"location":"usage/#generate-a-brag-document-in-a-different-language","title":"Generate a Brag Document in a Different Language","text":"<pre><code>brag my-org/my-repo --user my-username --language Portugu\u00eas\n</code></pre> <p>This will generate a brag document in Portuguese.</p>"},{"location":"usage/#save-the-brag-document-to-a-file","title":"Save the Brag Document to a File","text":"<pre><code>brag my-org/my-repo --user my-username --output brag.md\n</code></pre> <p>This will save the generated brag document to a file named <code>brag.md</code>.</p>"},{"location":"usage/#combine-multiple-options","title":"Combine Multiple Options","text":"<pre><code>brag my-org/my-repo --user my-username \\\n  --from 2023-01-01 --to 2023-12-31 \\\n  --language Portugu\u00eas \\\n  --output brag.md\n</code></pre> <p>This combines multiple options to generate a brag document in Portuguese for a specific time period and save it to a file.</p>"},{"location":"usage/#using-different-ai-models","title":"Using Different AI Models","text":"<p>Brag AI supports various AI models through <code>pydantic-ai</code>. You can specify which model to use with the <code>--model</code> option:</p>"},{"location":"usage/#openai-models","title":"OpenAI Models","text":"<pre><code>export OPENAI_API_KEY=your-openai-api-key\nbrag --model openai:gpt-4o owner/repo --user github-username\n</code></pre>"},{"location":"usage/#anthropic-models","title":"Anthropic Models","text":"<pre><code>export ANTHROPIC_API_KEY=your-anthropic-api-key\nbrag --model anthropic:claude-3-5-sonnet-latest owner/repo --user github-username\n</code></pre>"},{"location":"usage/#google-models","title":"Google Models","text":"<pre><code>export GEMINI_API_KEY=your-gemini-api-key\nbrag --model google-vertex:gemini-2.0-flash owner/repo --user github-username\n</code></pre>"},{"location":"usage/#viewing-help-information","title":"Viewing Help Information","text":"<p>For a complete list of commands and options, use the <code>--help</code> flag:</p> <pre><code>brag --help\n</code></pre>"},{"location":"usage/#next-steps","title":"Next Steps","text":"<p>Now that you know how to use Brag AI, you might want to check out the Configuration Guide for more advanced options or the API Reference if you want to use Brag AI programmatically.</p>"}]}